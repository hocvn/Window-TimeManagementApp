#pragma checksum "D:\Code\Projects\Window-TimeManagementApp\TimeManagementApp\ToDo\MainToDoPage.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "E54956B15636355854B5682CB199FF854AF584346CCD1F7D1A31A09A55AFBCBC"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TimeManagementApp.ToDo
{
    partial class MainToDoPage : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2409")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_CommunityToolkit_WinUI_Controls_SettingsExpander_IsExpanded(global::CommunityToolkit.WinUI.Controls.SettingsExpander obj, global::System.Boolean value)
            {
                obj.IsExpanded = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_CalendarDatePicker_Date(global::Microsoft.UI.Xaml.Controls.CalendarDatePicker obj, global::System.Nullable<global::System.DateTimeOffset> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.DateTimeOffset) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.DateTimeOffset), targetNullValue);
                }
                obj.Date = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TimePicker_Time(global::Microsoft.UI.Xaml.Controls.TimePicker obj, global::System.TimeSpan value)
            {
                obj.Time = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBox_Text(global::Microsoft.UI.Xaml.Controls.TextBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Microsoft.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2409")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private partial class MainToDoPage_obj22_Bindings :
            global::Microsoft.UI.Xaml.IDataTemplateExtension,
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IMainToDoPage_Bindings
        {
            private global::TimeManagementApp.ToDo.MyTask dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj22;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj23;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj24;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj25;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj26;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj23TextDisabled = false;
            private static bool isobj24TextDisabled = false;
            private static bool isobj25TextDisabled = false;
            private static bool isobj26TextDisabled = false;

            public MainToDoPage_obj22_Bindings()
            {
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 41 && columnNumber == 44)
                {
                    isobj23TextDisabled = true;
                }
                else if (lineNumber == 42 && columnNumber == 44)
                {
                    isobj24TextDisabled = true;
                }
                else if (lineNumber == 43 && columnNumber == 44)
                {
                    isobj25TextDisabled = true;
                }
                else if (lineNumber == 44 && columnNumber == 44)
                {
                    isobj26TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 22: // ToDo\MainToDoPage.xaml line 38
                        this.obj22 = new global::System.WeakReference(global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target));
                        break;
                    case 23: // ToDo\MainToDoPage.xaml line 41
                        this.obj23 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 24: // ToDo\MainToDoPage.xaml line 42
                        this.obj24 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 25: // ToDo\MainToDoPage.xaml line 43
                        this.obj25 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 26: // ToDo\MainToDoPage.xaml line 44
                        this.obj26 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2409")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            public void DataContextChangedHandler(global::Microsoft.UI.Xaml.FrameworkElement sender, global::Microsoft.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            var rootElement = (this.obj22.Target as global::Microsoft.UI.Xaml.Controls.StackPanel);
                            if (rootElement != null)
                            {
                                rootElement.DataContextChanged -= this.DataContextChangedHandler;
                            }
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_(global::WinRT.CastExtensions.As<global::TimeManagementApp.ToDo.MyTask>(item), 1 << phase);
            }

            public void Recycle()
            {
            }

            // IMainToDoPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::TimeManagementApp.ToDo.MyTask>(newDataRoot);
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::TimeManagementApp.ToDo.MyTask obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_TaskName(obj.TaskName, phase);
                        this.Update_TaskDescription(obj.TaskDescription, phase);
                        this.Update_StartTime(obj.StartTime, phase);
                        this.Update_EndTime(obj.EndTime, phase);
                    }
                }
            }
            private void Update_TaskName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // ToDo\MainToDoPage.xaml line 41
                    if (!isobj23TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj23, obj, null);
                    }
                }
            }
            private void Update_TaskDescription(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // ToDo\MainToDoPage.xaml line 42
                    if (!isobj24TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj24, obj, null);
                    }
                }
            }
            private void Update_StartTime(global::System.DateTime obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // ToDo\MainToDoPage.xaml line 43
                    if (!isobj25TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj25, obj.ToString(), null);
                    }
                }
            }
            private void Update_EndTime(global::System.DateTime obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // ToDo\MainToDoPage.xaml line 44
                    if (!isobj26TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj26, obj.ToString(), null);
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2409")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private partial class MainToDoPage_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IMainToDoPage_Bindings
        {
            private global::TimeManagementApp.ToDo.MainToDoPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Microsoft.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Microsoft.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::CommunityToolkit.WinUI.Controls.SettingsExpander obj2;
            private global::CommunityToolkit.WinUI.Controls.SettingsExpander obj3;
            private global::CommunityToolkit.WinUI.Controls.SettingsExpander obj4;
            private global::Microsoft.UI.Xaml.Controls.CalendarDatePicker obj6;
            private global::Microsoft.UI.Xaml.Controls.TimePicker obj7;
            private global::Microsoft.UI.Xaml.Controls.CalendarDatePicker obj8;
            private global::Microsoft.UI.Xaml.Controls.TimePicker obj9;
            private global::Microsoft.UI.Xaml.Controls.TextBox obj10;
            private global::Microsoft.UI.Xaml.Controls.TextBox obj11;
            private global::Microsoft.UI.Xaml.Controls.ListView obj20;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2IsExpandedDisabled = false;
            private static bool isobj3IsExpandedDisabled = false;
            private static bool isobj4IsExpandedDisabled = false;
            private static bool isobj6DateDisabled = false;
            private static bool isobj7TimeDisabled = false;
            private static bool isobj8DateDisabled = false;
            private static bool isobj9TimeDisabled = false;
            private static bool isobj10TextDisabled = false;
            private static bool isobj11TextDisabled = false;
            private static bool isobj20ItemsSourceDisabled = false;

            private MainToDoPage_obj1_BindingsTracking bindingsTracking;

            public MainToDoPage_obj1_Bindings()
            {
                this.bindingsTracking = new MainToDoPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 56 && columnNumber == 40)
                {
                    isobj2IsExpandedDisabled = true;
                }
                else if (lineNumber == 135 && columnNumber == 40)
                {
                    isobj3IsExpandedDisabled = true;
                }
                else if (lineNumber == 158 && columnNumber == 40)
                {
                    isobj4IsExpandedDisabled = true;
                }
                else if (lineNumber == 235 && columnNumber == 49)
                {
                    isobj6DateDisabled = true;
                }
                else if (lineNumber == 238 && columnNumber == 41)
                {
                    isobj7TimeDisabled = true;
                }
                else if (lineNumber == 216 && columnNumber == 49)
                {
                    isobj8DateDisabled = true;
                }
                else if (lineNumber == 219 && columnNumber == 41)
                {
                    isobj9TimeDisabled = true;
                }
                else if (lineNumber == 200 && columnNumber == 38)
                {
                    isobj10TextDisabled = true;
                }
                else if (lineNumber == 188 && columnNumber == 38)
                {
                    isobj11TextDisabled = true;
                }
                else if (lineNumber == 33 && columnNumber == 23)
                {
                    isobj20ItemsSourceDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // ToDo\MainToDoPage.xaml line 56
                        this.obj2 = global::WinRT.CastExtensions.As<global::CommunityToolkit.WinUI.Controls.SettingsExpander>(target);
                        this.bindingsTracking.RegisterTwoWayListener_2(this.obj2);
                        break;
                    case 3: // ToDo\MainToDoPage.xaml line 135
                        this.obj3 = global::WinRT.CastExtensions.As<global::CommunityToolkit.WinUI.Controls.SettingsExpander>(target);
                        this.bindingsTracking.RegisterTwoWayListener_3(this.obj3);
                        break;
                    case 4: // ToDo\MainToDoPage.xaml line 158
                        this.obj4 = global::WinRT.CastExtensions.As<global::CommunityToolkit.WinUI.Controls.SettingsExpander>(target);
                        this.bindingsTracking.RegisterTwoWayListener_4(this.obj4);
                        break;
                    case 6: // ToDo\MainToDoPage.xaml line 234
                        this.obj6 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CalendarDatePicker>(target);
                        break;
                    case 7: // ToDo\MainToDoPage.xaml line 237
                        this.obj7 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TimePicker>(target);
                        break;
                    case 8: // ToDo\MainToDoPage.xaml line 215
                        this.obj8 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CalendarDatePicker>(target);
                        break;
                    case 9: // ToDo\MainToDoPage.xaml line 218
                        this.obj9 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TimePicker>(target);
                        break;
                    case 10: // ToDo\MainToDoPage.xaml line 199
                        this.obj10 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                        break;
                    case 11: // ToDo\MainToDoPage.xaml line 187
                        this.obj11 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                        break;
                    case 20: // ToDo\MainToDoPage.xaml line 32
                        this.obj20 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2409")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IMainToDoPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::TimeManagementApp.ToDo.MainToDoPage>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Microsoft.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Microsoft.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Microsoft.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Microsoft.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Microsoft.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Microsoft.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::TimeManagementApp.ToDo.MainToDoPage obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_IsInsertExpanderExpanded(obj.IsInsertExpanderExpanded, phase);
                        this.Update_IsDeleteExpanderExpanded(obj.IsDeleteExpanderExpanded, phase);
                        this.Update_IsUpdateExpanderExpanded(obj.IsUpdateExpanderExpanded, phase);
                        this.Update_CurrentSelectTask(obj.CurrentSelectTask, phase);
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_IsInsertExpanderExpanded(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ToDo\MainToDoPage.xaml line 56
                    if (!isobj2IsExpandedDisabled)
                    {
                        XamlBindingSetters.Set_CommunityToolkit_WinUI_Controls_SettingsExpander_IsExpanded(this.obj2, obj);
                    }
                }
            }
            private void Update_IsDeleteExpanderExpanded(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ToDo\MainToDoPage.xaml line 135
                    if (!isobj3IsExpandedDisabled)
                    {
                        XamlBindingSetters.Set_CommunityToolkit_WinUI_Controls_SettingsExpander_IsExpanded(this.obj3, obj);
                    }
                }
            }
            private void Update_IsUpdateExpanderExpanded(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ToDo\MainToDoPage.xaml line 158
                    if (!isobj4IsExpandedDisabled)
                    {
                        XamlBindingSetters.Set_CommunityToolkit_WinUI_Controls_SettingsExpander_IsExpanded(this.obj4, obj);
                    }
                }
            }
            private void Update_CurrentSelectTask(global::TimeManagementApp.ToDo.MyTask obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_CurrentSelectTask(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_CurrentSelectTask_EndTime(obj.EndTime, phase);
                        this.Update_CurrentSelectTask_StartTime(obj.StartTime, phase);
                        this.Update_CurrentSelectTask_TaskDescription(obj.TaskDescription, phase);
                        this.Update_CurrentSelectTask_TaskName(obj.TaskName, phase);
                    }
                }
            }
            private void Update_CurrentSelectTask_EndTime(global::System.DateTime obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_CurrentSelectTask_EndTime_TimeOfDay(obj.TimeOfDay, phase);
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ToDo\MainToDoPage.xaml line 234
                    if (!isobj6DateDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_CalendarDatePicker_Date(this.obj6, (global::System.Nullable<global::System.DateTimeOffset>)this.LookupConverter("DateTimeToDateTimeOffsetConverter").Convert(obj, typeof(global::System.Nullable<global::System.DateTimeOffset>), null, null), null);
                    }
                }
            }
            private void Update_CurrentSelectTask_EndTime_TimeOfDay(global::System.TimeSpan obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ToDo\MainToDoPage.xaml line 237
                    if (!isobj7TimeDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TimePicker_Time(this.obj7, obj);
                    }
                }
            }
            private void Update_CurrentSelectTask_StartTime(global::System.DateTime obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_CurrentSelectTask_StartTime_TimeOfDay(obj.TimeOfDay, phase);
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ToDo\MainToDoPage.xaml line 215
                    if (!isobj8DateDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_CalendarDatePicker_Date(this.obj8, (global::System.Nullable<global::System.DateTimeOffset>)this.LookupConverter("DateTimeToDateTimeOffsetConverter").Convert(obj, typeof(global::System.Nullable<global::System.DateTimeOffset>), null, null), null);
                    }
                }
            }
            private void Update_CurrentSelectTask_StartTime_TimeOfDay(global::System.TimeSpan obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ToDo\MainToDoPage.xaml line 218
                    if (!isobj9TimeDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TimePicker_Time(this.obj9, obj);
                    }
                }
            }
            private void Update_CurrentSelectTask_TaskDescription(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ToDo\MainToDoPage.xaml line 199
                    if (!isobj10TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBox_Text(this.obj10, obj, null);
                    }
                }
            }
            private void Update_CurrentSelectTask_TaskName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ToDo\MainToDoPage.xaml line 187
                    if (!isobj11TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBox_Text(this.obj11, obj, null);
                    }
                }
            }
            private void Update_ViewModel(global::TimeManagementApp.ToDo.MyTaskViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Tasks(obj.Tasks, phase);
                    }
                }
            }
            private void Update_ViewModel_Tasks(global::System.Collections.ObjectModel.ObservableCollection<global::TimeManagementApp.ToDo.MyTask> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Tasks(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ToDo\MainToDoPage.xaml line 32
                    if (!isobj20ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj20, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_2_IsExpanded()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.IsInsertExpanderExpanded = this.obj2.IsExpanded;
                    }
                }
            }
            private void UpdateTwoWay_3_IsExpanded()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.IsDeleteExpanderExpanded = this.obj3.IsExpanded;
                    }
                }
            }
            private void UpdateTwoWay_4_IsExpanded()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.IsUpdateExpanderExpanded = this.obj4.IsExpanded;
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2409")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class MainToDoPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<MainToDoPage_obj1_Bindings> weakRefToBindingObj; 

                public MainToDoPage_obj1_BindingsTracking(MainToDoPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<MainToDoPage_obj1_Bindings>(obj);
                }

                public MainToDoPage_obj1_Bindings TryGetBindingObject()
                {
                    MainToDoPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_CurrentSelectTask(null);
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_Tasks(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainToDoPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::TimeManagementApp.ToDo.MainToDoPage obj = sender as global::TimeManagementApp.ToDo.MainToDoPage;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_IsInsertExpanderExpanded(obj.IsInsertExpanderExpanded, DATA_CHANGED);
                                bindings.Update_IsDeleteExpanderExpanded(obj.IsDeleteExpanderExpanded, DATA_CHANGED);
                                bindings.Update_IsUpdateExpanderExpanded(obj.IsUpdateExpanderExpanded, DATA_CHANGED);
                                bindings.Update_CurrentSelectTask(obj.CurrentSelectTask, DATA_CHANGED);
                                bindings.Update_ViewModel(obj.ViewModel, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsInsertExpanderExpanded":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsInsertExpanderExpanded(obj.IsInsertExpanderExpanded, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsDeleteExpanderExpanded":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsDeleteExpanderExpanded(obj.IsDeleteExpanderExpanded, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsUpdateExpanderExpanded":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsUpdateExpanderExpanded(obj.IsUpdateExpanderExpanded, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CurrentSelectTask":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CurrentSelectTask(obj.CurrentSelectTask, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ViewModel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel(obj.ViewModel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::TimeManagementApp.ToDo.MainToDoPage obj)
                {
                    MainToDoPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void PropertyChanged_CurrentSelectTask(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainToDoPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::TimeManagementApp.ToDo.MyTask obj = sender as global::TimeManagementApp.ToDo.MyTask;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_CurrentSelectTask_EndTime(obj.EndTime, DATA_CHANGED);
                                bindings.Update_CurrentSelectTask_StartTime(obj.StartTime, DATA_CHANGED);
                                bindings.Update_CurrentSelectTask_TaskDescription(obj.TaskDescription, DATA_CHANGED);
                                bindings.Update_CurrentSelectTask_TaskName(obj.TaskName, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "EndTime":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CurrentSelectTask_EndTime(obj.EndTime, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StartTime":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CurrentSelectTask_StartTime(obj.StartTime, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TaskDescription":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CurrentSelectTask_TaskDescription(obj.TaskDescription, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TaskName":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CurrentSelectTask_TaskName(obj.TaskName, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::TimeManagementApp.ToDo.MyTask cache_CurrentSelectTask = null;
                public void UpdateChildListeners_CurrentSelectTask(global::TimeManagementApp.ToDo.MyTask obj)
                {
                    if (obj != cache_CurrentSelectTask)
                    {
                        if (cache_CurrentSelectTask != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_CurrentSelectTask).PropertyChanged -= PropertyChanged_CurrentSelectTask;
                            cache_CurrentSelectTask = null;
                        }
                        if (obj != null)
                        {
                            cache_CurrentSelectTask = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_CurrentSelectTask;
                        }
                    }
                }
                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainToDoPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::TimeManagementApp.ToDo.MyTaskViewModel obj = sender as global::TimeManagementApp.ToDo.MyTaskViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_Tasks(obj.Tasks, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Tasks":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Tasks(obj.Tasks, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::TimeManagementApp.ToDo.MyTaskViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::TimeManagementApp.ToDo.MyTaskViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Tasks(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainToDoPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::TimeManagementApp.ToDo.MyTask> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::TimeManagementApp.ToDo.MyTask>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_Tasks(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    MainToDoPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::TimeManagementApp.ToDo.MyTask> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::TimeManagementApp.ToDo.MyTask>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::TimeManagementApp.ToDo.MyTask> cache_ViewModel_Tasks = null;
                public void UpdateChildListeners_ViewModel_Tasks(global::System.Collections.ObjectModel.ObservableCollection<global::TimeManagementApp.ToDo.MyTask> obj)
                {
                    if (obj != cache_ViewModel_Tasks)
                    {
                        if (cache_ViewModel_Tasks != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Tasks).PropertyChanged -= PropertyChanged_ViewModel_Tasks;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_Tasks).CollectionChanged -= CollectionChanged_ViewModel_Tasks;
                            cache_ViewModel_Tasks = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Tasks = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Tasks;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_Tasks;
                        }
                    }
                }
                public void RegisterTwoWayListener_2(global::CommunityToolkit.WinUI.Controls.SettingsExpander sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::CommunityToolkit.WinUI.Controls.SettingsExpander.IsExpandedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_2_IsExpanded();
                        }
                    });
                }
                public void RegisterTwoWayListener_3(global::CommunityToolkit.WinUI.Controls.SettingsExpander sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::CommunityToolkit.WinUI.Controls.SettingsExpander.IsExpandedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_3_IsExpanded();
                        }
                    });
                }
                public void RegisterTwoWayListener_4(global::CommunityToolkit.WinUI.Controls.SettingsExpander sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::CommunityToolkit.WinUI.Controls.SettingsExpander.IsExpandedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_4_IsExpanded();
                        }
                    });
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2409")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 5: // ToDo\MainToDoPage.xaml line 174
                {
                    global::Microsoft.UI.Xaml.Controls.Button element5 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)element5).Click += this.UpdateTask_Click;
                }
                break;
            case 6: // ToDo\MainToDoPage.xaml line 234
                {
                    this.UpdateTaskEndDate = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CalendarDatePicker>(target);
                }
                break;
            case 7: // ToDo\MainToDoPage.xaml line 237
                {
                    this.UpdateTaskEndTime = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TimePicker>(target);
                }
                break;
            case 8: // ToDo\MainToDoPage.xaml line 215
                {
                    this.UpdateTaskStartDate = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CalendarDatePicker>(target);
                }
                break;
            case 9: // ToDo\MainToDoPage.xaml line 218
                {
                    this.UpdateTaskStartTime = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TimePicker>(target);
                }
                break;
            case 10: // ToDo\MainToDoPage.xaml line 199
                {
                    this.UpdateTaskDescription = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                }
                break;
            case 11: // ToDo\MainToDoPage.xaml line 187
                {
                    this.UpdateTaskName = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                }
                break;
            case 12: // ToDo\MainToDoPage.xaml line 151
                {
                    global::Microsoft.UI.Xaml.Controls.Button element12 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)element12).Click += this.DeleteTask_Click;
                }
                break;
            case 13: // ToDo\MainToDoPage.xaml line 72
                {
                    global::Microsoft.UI.Xaml.Controls.Button element13 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)element13).Click += this.InsertTask_Click;
                }
                break;
            case 14: // ToDo\MainToDoPage.xaml line 127
                {
                    this.InsertTaskEndDate = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CalendarDatePicker>(target);
                }
                break;
            case 15: // ToDo\MainToDoPage.xaml line 128
                {
                    this.InsertTaskEndTime = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TimePicker>(target);
                }
                break;
            case 16: // ToDo\MainToDoPage.xaml line 111
                {
                    this.InsertTaskStartDate = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CalendarDatePicker>(target);
                }
                break;
            case 17: // ToDo\MainToDoPage.xaml line 112
                {
                    this.InsertTaskStartTime = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TimePicker>(target);
                }
                break;
            case 18: // ToDo\MainToDoPage.xaml line 96
                {
                    this.InsertTaskDescription = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                }
                break;
            case 19: // ToDo\MainToDoPage.xaml line 85
                {
                    this.InsertTaskName = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                }
                break;
            case 20: // ToDo\MainToDoPage.xaml line 32
                {
                    this.myTasksListView = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ListView)this.myTasksListView).SelectionChanged += this.MyTasksListView_SelectionChanged;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }


        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2409")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // ToDo\MainToDoPage.xaml line 2
                {                    
                    global::Microsoft.UI.Xaml.Controls.Page element1 = (global::Microsoft.UI.Xaml.Controls.Page)target;
                    MainToDoPage_obj1_Bindings bindings = new MainToDoPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 22: // ToDo\MainToDoPage.xaml line 38
                {                    
                    global::Microsoft.UI.Xaml.Controls.StackPanel element22 = (global::Microsoft.UI.Xaml.Controls.StackPanel)target;
                    MainToDoPage_obj22_Bindings bindings = new MainToDoPage_obj22_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element22.DataContext);
                    element22.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Microsoft.UI.Xaml.DataTemplate.SetExtensionInstance(element22, bindings);
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element22, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

